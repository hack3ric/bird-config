# (64511, 1) :: latency \in (0, 2.7ms]
# (64511, 2) :: latency \in (2.7ms, 7.3ms]
# (64511, 3) :: latency \in (7.3ms, 20ms]
# (64511, 4) :: latency \in (20ms, 55ms]
# (64511, 5) :: latency \in (55ms, 148ms]
# (64511, 6) :: latency \in (148ms, 403ms]
# (64511, 7) :: latency \in (403ms, 1097ms]
# (64511, 8) :: latency \in (1097ms, 2981ms]
# (64511, 9) :: latency > 2981ms
# (64511, x) :: latency \in [exp(x-1), exp(x)] ms (for x < 10)
function dn42_update_latency(int link_latency) {
  bgp_community.add((64511, link_latency));
  if (64511, 9) ~ bgp_community then { bgp_community.delete([(64511, 1..8)]); return 9; }
  else if (64511, 8) ~ bgp_community then { bgp_community.delete([(64511, 1..7)]); return 8; }
  else if (64511, 7) ~ bgp_community then { bgp_community.delete([(64511, 1..6)]); return 7; }
  else if (64511, 6) ~ bgp_community then { bgp_community.delete([(64511, 1..5)]); return 6; }
  else if (64511, 5) ~ bgp_community then { bgp_community.delete([(64511, 1..4)]); return 5; }
  else if (64511, 4) ~ bgp_community then { bgp_community.delete([(64511, 1..3)]); return 4; }
  else if (64511, 3) ~ bgp_community then { bgp_community.delete([(64511, 1..2)]); return 3; }
  else if (64511, 2) ~ bgp_community then { bgp_community.delete([(64511, 1..1)]); return 2; }
  else return 1;
}


# (64511, 21) :: bw >= 0.1mbit
# (64511, 22) :: bw >= 1mbit
# (64511, 23) :: bw >= 10mbit
# (64511, 24) :: bw >= 100mbit
# (64511, 25) :: bw >= 1000mbit
# (64511, 2x) :: bw >= 10^(x-2) mbit
# bw = min(up,down) for asymmetric connections
function dn42_update_bandwidth(int link_bandwidth) {
  bgp_community.add((64511, link_bandwidth));
  if (64511, 21) ~ bgp_community then { bgp_community.delete([(64511, 22..29)]); return 21; }
  else if (64511, 22) ~ bgp_community then { bgp_community.delete([(64511, 23..29)]); return 22; }
  else if (64511, 23) ~ bgp_community then { bgp_community.delete([(64511, 24..29)]); return 23; }
  else if (64511, 24) ~ bgp_community then { bgp_community.delete([(64511, 25..29)]); return 24; }
  else if (64511, 25) ~ bgp_community then { bgp_community.delete([(64511, 26..29)]); return 25; }
  else if (64511, 26) ~ bgp_community then { bgp_community.delete([(64511, 27..29)]); return 26; }
  else if (64511, 27) ~ bgp_community then { bgp_community.delete([(64511, 28..29)]); return 27; }
  else if (64511, 28) ~ bgp_community then { bgp_community.delete([(64511, 29..29)]); return 28; }
  else return 29;
}

# (64511, 31) :: not encrypted
# (64511, 32) :: encrypted with unsafe vpn solution
# (64511, 33) :: encrypted with safe vpn solution (but no PFS - the usual OpenVPN p2p configuration falls in this category)
# (64511, 34) :: encrypted with safe vpn solution with PFS (Perfect Forward Secrecy)
function dn42_update_crypto(int link_crypto) {
  bgp_community.add((64511, link_crypto));
  if (64511, 31) ~ bgp_community then { bgp_community.delete([(64511, 32..34)]); return 31; }
  else if (64511, 32) ~ bgp_community then { bgp_community.delete([(64511, 33..34)]); return 32; }
  else if (64511, 33) ~ bgp_community then { bgp_community.delete([(64511, 34..34)]); return 33; }
  else return 34;
}

function dn42_update_flags(int link_latency; int link_bandwidth; int link_crypto) {
  dn42_update_latency(link_latency);
  dn42_update_bandwidth(link_bandwidth);
  dn42_update_crypto(link_crypto);
}

define COMM_FULL = (OWNAS42, 4, 10);
define COMM_TRANSIT = (OWNAS42, 4, 20);
define COMM_PRIV_TRANSIT = (OWNAS42, 4, 21);
define COMM_DOWNSTREAM = (OWNAS42, 4, 30);
define COMM_PEER = (OWNAS42, 4, 40);
define COMM_PRIV_PEER = (OWNAS42, 4, 41);

define COMM_NEIGHBOR_TYPES = [
  COMM_FULL, COMM_TRANSIT, COMM_PRIV_TRANSIT,
  COMM_DOWNSTREAM, COMM_PEER, COMM_PRIV_PEER
];

function dn42_neighbor_community_import(string ntype) {
  if ntype = "full" then bgp_large_community.add(COMM_FULL);
  else if ntype = "transit" then bgp_large_community.add(COMM_TRANSIT);
  else if ntype = "priv_transit" then bgp_large_community.add(COMM_PRIV_TRANSIT);
  else if ntype = "downstream" then bgp_large_community.add(COMM_DOWNSTREAM);
  else if ntype = "peer" then bgp_large_community.add(COMM_PEER);
  else if ntype = "priv_peer" then bgp_large_community.add(COMM_PEER);
}

function dn42_neighbor_allow_import(string ntype) {
  if ntype = "downstream" || ntype = "peer" || ntype = "priv_peer" then {
    if bgp_path.last != bgp_path.first then reject;
  }
}

function dn42_neighbor_allow_export(string ntype) {
  if !is_self_net() then {
    if ntype = "transit" then {
      if COMM_DOWNSTREAM !~ bgp_large_community then reject;
    } else if ntype = "downstream" then {
      if COMM_PRIV_TRANSIT ~ bgp_large_community || COMM_PRIV_PEER ~ bgp_large_community then reject;
    } else if ntype = "priv_transit" || ntype = "peer" || ntype = "priv_peer" then reject;
  }
}

# (64511, 41) :: Europe
# (64511, 42) :: North America-E
# (64511, 43) :: North America-C
# (64511, 44) :: North America-W
# (64511, 45) :: Central America
# (64511, 46) :: South America-E
# (64511, 47) :: South America-W
# (64511, 48) :: Africa-N (above Sahara)
# (64511, 49) :: Africa-S (below Sahara)
# (64511, 50) :: Asia-S (IN,PK,BD)
# (64511, 51) :: Asia-SE (TH,SG,PH,ID,MY)
# (64511, 52) :: Asia-E (JP,CN,KR,TW,HK)
# (64511, 53) :: Pacific&Oceania (AU,NZ,FJ)
# (64511, 54) :: Antarctica
# (64511, 55) :: Asia-N (RU)
# (64511, 56) :: Asia-W (IR,TR,UAE)
# (64511, 57) :: Central Asia (AF,UZ,KZ)
#
# (64511, 1124) :: Canada
# (64511, 1156) :: China
# (64511, 1158) :: Taiwan
# (64511, 1250) :: France
# (64511, 1276) :: Germany
# (64511, 1344) :: Hong Kong
# (64511, 1392) :: Japan
# (64511, 1528) :: Netherlands
# (64511, 1578) :: Norway
# (64511, 1643) :: Russian Federation
# (64511, 1702) :: Singapore
# (64511, 1756) :: Switzerland
# (64511, 1826) :: United Kingdom
# (64511, 1840) :: United States of America
function dn42_update_region_pref() {
  bgp_local_pref = 100;
  bgp_med = 500;

  if bgp_path.len = 1 then bgp_local_pref = add_no_wrap(bgp_local_pref, 20);
  else if bgp_path.first = bgp_path.last then bgp_med = sub_no_wrap(bgp_med, 80);
  if (64511, OWNCOUNTRY) ~ bgp_community then bgp_local_pref = add_no_wrap(bgp_local_pref, 20);

  if (64511, OWNREGION) ~ bgp_community then bgp_med = sub_no_wrap(bgp_med, 100);
  else if OWNREGION ~ [42..44] then {
    if (64511, 42) ~ bgp_community
    || (64511, 43) ~ bgp_community
    || (64511, 44) ~ bgp_community
    then {
      bgp_med = sub_no_wrap(bgp_med, 80);
    } else if (64511, 41) ~ bgp_community then {
      bgp_med = sub_no_wrap(bgp_med, 20);
    }
  } else if OWNREGION ~ [50..52] then {
    if (64511, 50) ~ bgp_community
    || (64511, 51) ~ bgp_community
    || (64511, 52) ~ bgp_community
    then {
      bgp_med = sub_no_wrap(bgp_med, 80);
    }
  }

  return true;
}
