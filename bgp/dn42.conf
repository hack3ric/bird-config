roa4 table dn42_roa_v4;
roa6 table dn42_roa_v6;

protocol static {
  roa4 { table dn42_roa_v4; };
  include "../dn42_roa_v4.conf";
};

protocol static {
  roa6 { table dn42_roa_v6; };
  include "../dn42_roa_v6.conf";
};

function dn42_bgp_import_check() {
  if is_valid_network_42() && !is_self_net() then {
    if net.type = NET_IP4 then {
      if roa_check(dn42_roa_v4, net, bgp_path.last) != ROA_VALID then {
        print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
        reject;
      }
    } else if net.type = NET_IP6 then {
      if roa_check(dn42_roa_v6, net, bgp_path.last) != ROA_VALID then {
        print "[dn42] ROA check failed for ", net, " ASN ", bgp_path.last;
        reject;
      }
    }
  } else reject;
}

function dn42_bgp_export_check() {
  if !is_valid_network_42() || source !~ [RTS_STATIC, RTS_BGP] then reject;
}

function dn42_bgp_import(int prepend_count) {
  dn42_bgp_import_check();
  case prepend_count {
    0: {}
    1: bgp_path.prepend(bgp_path.first);
    2: bgp_path.prepend(bgp_path.first);
       bgp_path.prepend(bgp_path.first);
    3: bgp_path.prepend(bgp_path.first);
       bgp_path.prepend(bgp_path.first);
       bgp_path.prepend(bgp_path.first);
    else: print "[dn42] prepend count too high";
  }
  accept;
}

function dn42_bgp_export(int prepend_count) {
  dn42_bgp_export_check();
  case prepend_count {
    0: {}
    1: bgp_path.prepend(OWNAS42);
    2: bgp_path.prepend(OWNAS42);
       bgp_path.prepend(OWNAS42);
    3: bgp_path.prepend(OWNAS42);
       bgp_path.prepend(OWNAS42);
       bgp_path.prepend(OWNAS42);
    else: print "[dn42] prepend count too high";
  }
  accept;
}

template bgp dn42_peer from bgp_rate_limited {
  local as OWNAS42;
  path metric 1;

  ipv4 {
    import where dn42_bgp_import(0);
    export where dn42_bgp_export(0);
  };

  ipv6 {
    import where dn42_bgp_import(0);
    export where dn42_bgp_export(0);
  };
}

template bgp dn42_peer_extended from dn42_peer {
  ipv4 {
    extended next hop;
  };
}
